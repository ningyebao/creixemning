{
  "version": 3,
  "sources": ["../../../app/lib/api/client.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\lib\\\\api\\\\client.ts\"\n);\nimport.meta.hot.lastModified = \"1748531257219.3833\";\n}\n// REMIX HMR END\n\n// app/lib/api/client.ts\r\nimport { json } from \"@remix-run/node\";\r\nimport type { TypedResponse } from \"@remix-run/node\";\r\n\r\n/**\r\n * Configuraci\u00F3n global del cliente API\r\n */\r\ninterface ApiClientConfig {\r\n  baseUrl: string;\r\n  defaultHeaders?: Record<string, string>;\r\n  timeout?: number;\r\n  retries?: number;\r\n  debug?: boolean;\r\n}\r\n\r\n/**\r\n * Opciones para una solicitud individual\r\n */\r\ninterface RequestOptions {\r\n  headers?: Record<string, string>;\r\n  timeout?: number;\r\n  signal?: AbortSignal;\r\n  cache?: RequestCache;\r\n}\r\n\r\n\r\ninterface QueryParams {\r\n  [key: string]: any;\r\n}\r\n\r\nconst API_URL = \"http://localhost:8080\";\r\n\r\nconst DEFAULT_TIMEOUT = 30000;\r\n\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  details: string;\r\n  originalError?: Error;\r\n\r\n  constructor(message: string, status: number, details: string, originalError?: Error) {\r\n    super(message);\r\n    this.name = \"ApiError\";\r\n    this.status = status;\r\n    this.details = details;\r\n    this.originalError = originalError;\r\n\r\n    Object.setPrototypeOf(this, ApiError.prototype);\r\n  }\r\n\r\n\r\n  toUserFriendlyMessage(): string {\r\n    if (this.status === 401) return \"Tu sesi\u00F3n ha expirado. Por favor, inicia sesi\u00F3n nuevamente.\";\r\n    if (this.status === 403) return \"No tienes permisos para realizar esta acci\u00F3n.\";\r\n    if (this.status === 404) return \"El recurso solicitado no existe.\";\r\n    if (this.status >= 500) return \"Ha ocurrido un error en el servidor. Por favor, int\u00E9ntalo m\u00E1s tarde.\";\r\n    return this.message;\r\n  }\r\n}\r\n\r\n\r\nexport class ApiClient {\r\n  private baseUrl: string;\r\n  private defaultHeaders: Record<string, string>;\r\n  private defaultTimeout: number;\r\n  private maxRetries: number;\r\n  private debug: boolean;\r\n  private authToken?: string;\r\n\r\n  /**\r\n   * Constructor del cliente API\r\n   * @param config Configuraci\u00F3n opcional del cliente\r\n   */\r\n  constructor(config: Partial<ApiClientConfig> = {}) {\r\n    const {\r\n      baseUrl = API_URL,\r\n      defaultHeaders = {},\r\n      timeout = DEFAULT_TIMEOUT,\r\n      retries = 0,\r\n      debug = false\r\n    } = config;\r\n\r\n    this.baseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;\r\n    this.defaultTimeout = timeout;\r\n    this.maxRetries = retries;\r\n    this.debug = debug;\r\n\r\n    // Headers por defecto\r\n    this.defaultHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Accept\": \"application/json\",\r\n      ...defaultHeaders\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Establece el token de autenticaci\u00F3n para las solicitudes\r\n   * @param token Token de autenticaci\u00F3n\r\n   */\r\n  setAuthToken(token: string): void {\r\n    this.authToken = token;\r\n  }\r\n\r\n  /**\r\n   * Limpia el token de autenticaci\u00F3n\r\n   */\r\n  clearAuthToken(): void {\r\n    this.authToken = undefined;\r\n  }\r\n\r\n  /**\r\n   * Construye la URL completa para un endpoint\r\n   * @param endpoint Endpoint relativo\r\n   * @returns URL completa\r\n   */\r\n  private buildUrl(endpoint: string): string {\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n    return `${this.baseUrl}${cleanEndpoint}`;\r\n  }\r\n\r\n  /**\r\n   * Construye un query string para los par\u00E1metros de consulta\r\n   * @param params Par\u00E1metros de consulta\r\n   * @returns Query string formateado\r\n   */\r\n  private buildQueryString(params?: QueryParams): string {\r\n    if (!params || Object.keys(params).length === 0) {\r\n      return '';\r\n    }\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      // Skip undefined, null or empty string values\r\n      if (value === undefined || value === null || value === \"\") {\r\n        return;\r\n      }\r\n\r\n      // Handle arrays\r\n      if (Array.isArray(value)) {\r\n        value.forEach(item => {\r\n          if (item !== undefined && item !== null && item !== \"\") {\r\n            searchParams.append(`${key}[]`, String(item));\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Handle boolean values\r\n      if (typeof value === 'boolean') {\r\n        searchParams.append(key, value ? 'true' : 'false');\r\n        return;\r\n      }\r\n\r\n      // Handle all other values\r\n      searchParams.append(key, String(value));\r\n    });\r\n\r\n    const queryString = searchParams.toString();\r\n    return queryString ? `?${queryString}` : '';\r\n  }\r\n\r\n  /**\r\n   * Prepara las cabeceras HTTP para una solicitud\r\n   * @param customHeaders Cabeceras personalizadas\r\n   * @returns Cabeceras combinadas\r\n   */\r\n  private prepareHeaders(customHeaders?: Record<string, string>): Headers {\r\n    const headers = new Headers();\r\n\r\n    // A\u00F1adir headers por defecto\r\n    Object.entries(this.defaultHeaders).forEach(([key, value]) => {\r\n      headers.append(key, value);\r\n    });\r\n\r\n    // A\u00F1adir token de autenticaci\u00F3n si existe\r\n    if (this.authToken) {\r\n      headers.append('Authorization', `Bearer ${this.authToken}`);\r\n    }\r\n\r\n    // A\u00F1adir headers personalizados\r\n    if (customHeaders) {\r\n      Object.entries(customHeaders).forEach(([key, value]) => {\r\n        headers.set(key, value);\r\n      });\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud HTTP\r\n   * @param method M\u00E9todo HTTP\r\n   * @param endpoint Endpoint relativo\r\n   * @param data Datos para enviar (para POST, PUT, PATCH)\r\n   * @param params Par\u00E1metros de consulta\r\n   * @param options Opciones adicionales\r\n   * @returns Respuesta tipada\r\n   */\r\n  private async request<T>(\r\n    method: string,\r\n    endpoint: string,\r\n    data?: any,\r\n    params?: QueryParams,\r\n    options: RequestOptions = {}\r\n  ): Promise<T> {\r\n    const url = this.buildUrl(endpoint) + this.buildQueryString(params);\r\n    const headers = this.prepareHeaders(options.headers);\r\n    const timeout = options.timeout || this.defaultTimeout;\r\n\r\n    // Crear controlador de aborto para timeout\r\n    const controller = new AbortController();\r\n    const { signal } = options.signal ? { signal: options.signal } : controller;\r\n\r\n    // Establecer timeout\r\n    const timeoutId = setTimeout(() => {\r\n      controller.abort();\r\n    }, timeout);\r\n\r\n    if (this.debug) {\r\n      console.log(`=== API ${method} REQUEST ===`);\r\n      console.log(`URL: ${url}`);\r\n      console.log(`Headers:`, Object.fromEntries(headers.entries()));\r\n      if (data) {\r\n        console.log(`Body:`, JSON.stringify(data, null, 2));\r\n      }\r\n      if (params) {\r\n        console.log(`Query Params:`, params);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const requestOptions: RequestInit = {\r\n        method,\r\n        headers,\r\n        signal,\r\n        ...(options.cache && { cache: options.cache }),\r\n      };\r\n\r\n      // A\u00F1adir body si es necesario\r\n      if (data !== undefined && ['POST', 'PUT', 'PATCH'].includes(method)) {\r\n        requestOptions.body = JSON.stringify(data);\r\n      }\r\n\r\n      // Realizar petici\u00F3n con reintentos si es necesario\r\n      let response: Response | null = null;\r\n      let lastError: Error | null = null;\r\n      let attempt = 0;\r\n\r\n      while (attempt <= this.maxRetries && !response) {\r\n        if (attempt > 0 && this.debug) {\r\n          console.log(`Reintento ${attempt} para ${method} ${url}`);\r\n        }\r\n\r\n        try {\r\n          response = await fetch(url, requestOptions);\r\n        } catch (error) {\r\n          lastError = error instanceof Error ? error : new Error(String(error));\r\n          attempt++;\r\n\r\n          if (attempt <= this.maxRetries) {\r\n            // Esperar antes de reintentar (backoff exponencial)\r\n            await new Promise(resolve => setTimeout(resolve, 2 ** attempt * 100));\r\n          }\r\n        }\r\n      }\r\n\r\n      // Si a\u00FAn no hay respuesta despu\u00E9s de los reintentos, lanzar el \u00FAltimo error\r\n      if (!response) {\r\n        if (lastError?.name === 'AbortError') {\r\n          throw new ApiError(\"La solicitud ha excedido el tiempo de espera\", 408, \"Timeout\", lastError);\r\n        }\r\n        throw new ApiError(\r\n          \"Error de conexi\u00F3n con el servidor\",\r\n          0,\r\n          lastError?.message || \"Error desconocido\",\r\n          lastError || undefined\r\n        );\r\n      }\r\n\r\n      return await this.handleResponse<T>(response);\r\n    } catch (error) {\r\n      if (this.debug) {\r\n        console.error(`Error en ${method} ${url}:`, error);\r\n      }\r\n\r\n      if (error instanceof ApiError) {\r\n        throw error;\r\n      }\r\n\r\n      // Otros tipos de errores\r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      const errorName = error instanceof Error ? error.name : 'Unknown';\r\n\r\n      if (errorName === 'AbortError') {\r\n        throw new ApiError(\"La solicitud ha excedido el tiempo de espera\", 408, \"Timeout\");\r\n      }\r\n\r\n      throw new ApiError(\r\n        \"Error al comunicarse con el servidor\",\r\n        0,\r\n        errorMessage,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    } finally {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Procesa la respuesta HTTP\r\n   * @param response Objeto Response de fetch\r\n   * @returns Datos tipados de la respuesta\r\n   */\r\n  private async handleResponse<T>(response: Response): Promise<T> {\r\n    if (this.debug) {\r\n      console.log(`=== API RESPONSE ===`);\r\n      console.log(`Status: ${response.status} ${response.statusText}`);\r\n      console.log(`Headers:`, Object.fromEntries(response.headers.entries()));\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (this.debug) {\r\n        console.error(`HTTP error: ${response.status}`, response);\r\n      }\r\n\r\n      let errorMessage = `Error HTTP: ${response.status}`;\r\n      let errorDetails = response.statusText;\r\n\r\n      try {\r\n        const contentType = response.headers.get('content-type');\r\n\r\n        if (contentType && contentType.includes('application/json')) {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.detail || errorData.message || errorMessage;\r\n          errorDetails = JSON.stringify(errorData);\r\n\r\n          if (this.debug) {\r\n            console.error('Error response body:', errorData);\r\n          }\r\n        } else {\r\n          errorDetails = await response.text();\r\n          if (this.debug) {\r\n            console.error('Error response text:', errorDetails);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        // Si no podemos parsear el error, usamos valores por defecto\r\n      }\r\n\r\n      throw new ApiError(errorMessage, response.status, errorDetails);\r\n    }\r\n\r\n    // Si es 204 No Content\r\n    if (response.status === 204) {\r\n      return {} as T;\r\n    }\r\n\r\n    // Verificar el Content-Type\r\n    const contentType = response.headers.get('content-type');\r\n\r\n    // Si no hay datos que devolver\r\n    if (!contentType) {\r\n      return {} as T;\r\n    }\r\n\r\n    try {\r\n      if (contentType.includes('application/json')) {\r\n        return await response.json() as T;\r\n      } else if (contentType.includes('text/')) {\r\n        const text = await response.text();\r\n        return text as unknown as T;\r\n      } else {\r\n        // Blob, ArrayBuffer u otros formatos seg\u00FAn sea necesario\r\n        const blob = await response.blob();\r\n        return blob as unknown as T;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al procesar la respuesta:\", error);\r\n      throw new ApiError(\r\n        \"Error al procesar la respuesta\",\r\n        0,\r\n        error instanceof Error ? error.message : String(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud GET\r\n   * @param endpoint Endpoint relativo\r\n   * @param params Par\u00E1metros de consulta\r\n   * @param options Opciones adicionales\r\n   * @returns Datos tipados\r\n   */\r\n  async get<T>(\r\n    endpoint: string,\r\n    params?: QueryParams,\r\n    options?: RequestOptions\r\n  ): Promise<T> {\r\n    return this.request<T>('GET', endpoint, undefined, params, options);\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud POST\r\n   * @param endpoint Endpoint relativo\r\n   * @param data Datos a enviar\r\n   * @param options Opciones adicionales\r\n   * @returns Datos tipados\r\n   */\r\n  async post<T>(\r\n    endpoint: string,\r\n    data: any,\r\n    options?: RequestOptions\r\n  ): Promise<T> {\r\n    return this.request<T>('POST', endpoint, data, undefined, options);\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud PUT\r\n   * @param endpoint Endpoint relativo\r\n   * @param data Datos a enviar\r\n   * @param options Opciones adicionales\r\n   * @returns Datos tipados\r\n   */\r\n  async put<T>(\r\n    endpoint: string,\r\n    data: any,\r\n    options?: RequestOptions\r\n  ): Promise<T> {\r\n    return this.request<T>('PUT', endpoint, data, undefined, options);\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud PATCH\r\n   * @param endpoint Endpoint relativo\r\n   * @param data Datos a enviar\r\n   * @param options Opciones adicionales\r\n   * @returns Datos tipados\r\n   */\r\n  async patch<T>(\r\n    endpoint: string,\r\n    data: any,\r\n    options?: RequestOptions\r\n  ): Promise<T> {\r\n    return this.request<T>('PATCH', endpoint, data, undefined, options);\r\n  }\r\n\r\n  /**\r\n   * Realiza una solicitud DELETE\r\n   * @param endpoint Endpoint relativo\r\n   * @param params Par\u00E1metros de consulta\r\n   * @param options Opciones adicionales\r\n   * @returns Datos tipados\r\n   */\r\n  async delete<T>(\r\n    endpoint: string,\r\n    params?: QueryParams,\r\n    options?: RequestOptions\r\n  ): Promise<T> {\r\n    return this.request<T>('DELETE', endpoint, undefined, params, options);\r\n  }\r\n\r\n  /**\r\n   * Habilita el logging detallado de las requests\r\n   */\r\n  enableDebugLogging(): void {\r\n    this.debug = true;\r\n  }\r\n\r\n  /**\r\n   * Deshabilita el logging detallado\r\n   */\r\n  disableDebugLogging(): void {\r\n    this.debug = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Maneja errores de API para respuestas de Remix\r\n * @param error Error a manejar\r\n * @returns Respuesta JSON tipada\r\n */\r\nexport function handleApiError(error: unknown): TypedResponse {\r\n  if (error instanceof ApiError) {\r\n    // Determinar un c\u00F3digo de estado HTTP significativo\r\n    const status = error.status || 500;\r\n\r\n    return json(\r\n      {\r\n        success: false,\r\n        message: error.toUserFriendlyMessage(),\r\n        details: error.details,\r\n        status\r\n      },\r\n      { status }\r\n    );\r\n  }\r\n\r\n  // Para errores desconocidos\r\n  console.error(\"Error inesperado:\", error);\r\n\r\n  return json(\r\n    {\r\n      success: false,\r\n      message: \"Ha ocurrido un error inesperado.\",\r\n      status: 500\r\n    },\r\n    { status: 500 }\r\n  );\r\n}\r\n\r\n// Instancia por defecto del cliente API\r\nexport const apiClient = new ApiClient({\r\n  debug: true // Siempre en true para debugging // Modificado seg\u00FAn tu solicitud\r\n});"],
  "mappings": "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",
  "names": ["contentType"]
}
