{
  "version": 3,
  "sources": ["../../../app/services/leads.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\leads.service.ts\"\n);\nimport.meta.hot.lastModified = \"1745320750899.3025\";\n}\n// REMIX HMR END\n\n// app/services/lead.service.ts\r\nimport { apiClient } from \"~/lib/api/client\";\r\nimport type { Lead, LeadFilters } from \"~/lib/types\";\r\n\r\nexport class LeadService {\r\n  /**\r\n   * Obtiene todos los leads con filtros opcionales\r\n   */\r\n  static async getAll(skip = 0, limit = 100, filters?: LeadFilters): Promise<Lead[]> {\r\n    const params = { skip, limit, ...filters };\r\n    return apiClient.get<Lead[]>(\"/leads/\", params);\r\n  }\r\n\r\n  /**\r\n   * Obtiene leads no asignados con filtros opcionales\r\n   */\r\n  static async getUnassigned(skip = 0, limit = 100, filters?: LeadFilters): Promise<Lead[]> {\r\n    const params = { skip, limit, ...filters };\r\n    return apiClient.get<Lead[]>(\"/leads/unassigned/\", params);\r\n  }\r\n\r\n  /**\r\n   * Busca leads por t\u00E9rmino de b\u00FAsqueda\r\n   */\r\n  static async search(searchTerm: string, skip = 0, limit = 100): Promise<Lead[]> {\r\n    const params = { q: searchTerm, skip, limit };\r\n    return apiClient.get<Lead[]>(\"/leads/search/\", params);\r\n  }\r\n\r\n  /**\r\n   * Obtiene un lead por su ID\r\n   */\r\n  static async getById(id: number): Promise<Lead> {\r\n    return apiClient.get<Lead>(`/leads/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\u00EDsticas de leads agrupados por estado\r\n   */\r\n  static async getStatusStats(): Promise<{ status: string; count: number }[]> {\r\n    return apiClient.get<{ status: string; count: number }[]>('/leads/status-stats/');\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las provincias disponibles\r\n   */\r\n  static async getAllProvincias(): Promise<string[]> {\r\n    const leads = await this.getAll(0, 1000);\r\n    const provincias = new Set<string>();\r\n\r\n    leads.forEach(lead => {\r\n      if (lead.provincia_lead && lead.provincia_lead.trim()) {\r\n        provincias.add(lead.provincia_lead);\r\n      }\r\n    });\r\n\r\n    return Array.from(provincias).sort();\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las poblaciones disponibles\r\n   */\r\n  static async getAllPoblaciones(): Promise<string[]> {\r\n    const leads = await this.getAll(0, 1000);\r\n    const poblaciones = new Set<string>();\r\n\r\n    leads.forEach(lead => {\r\n      if (lead.poblacio_lead && lead.poblacio_lead.trim()) {\r\n        poblaciones.add(lead.poblacio_lead);\r\n      }\r\n    });\r\n\r\n    return Array.from(poblaciones).sort();\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las comarcas disponibles\r\n   */\r\n  static async getAllComarcas(): Promise<string[]> {\r\n    const leads = await this.getAll(0, 1000);\r\n    const comarcas = new Set<string>();\r\n\r\n    leads.forEach(lead => {\r\n      if (lead.comarca_lead && lead.comarca_lead.trim()) {\r\n        comarcas.add(lead.comarca_lead);\r\n      }\r\n    });\r\n\r\n    return Array.from(comarcas).sort();\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAOO,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA,EAIvB,aAAa,OAAO,OAAO,GAAG,QAAQ,KAAK,SAAwC;AACjF,UAAM,SAAS,EAAE,MAAM,OAAO,GAAG,QAAQ;AACzC,WAAO,UAAU,IAAY,WAAW,MAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,cAAc,OAAO,GAAG,QAAQ,KAAK,SAAwC;AACxF,UAAM,SAAS,EAAE,MAAM,OAAO,GAAG,QAAQ;AACzC,WAAO,UAAU,IAAY,sBAAsB,MAAM;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,YAAoB,OAAO,GAAG,QAAQ,KAAsB;AAC9E,UAAM,SAAS,EAAE,GAAG,YAAY,MAAM,MAAM;AAC5C,WAAO,UAAU,IAAY,kBAAkB,MAAM;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAQ,IAA2B;AAC9C,WAAO,UAAU,IAAU,UAAU,IAAI;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,iBAA+D;AAC1E,WAAO,UAAU,IAAyC,sBAAsB;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,mBAAsC;AACjD,UAAM,QAAQ,MAAM,KAAK,OAAO,GAAG,GAAI;AACvC,UAAM,aAAa,oBAAI,IAAY;AAEnC,UAAM,QAAQ,UAAQ;AACpB,UAAI,KAAK,kBAAkB,KAAK,eAAe,KAAK,GAAG;AACrD,mBAAW,IAAI,KAAK,cAAc;AAAA,MACpC;AAAA,IACF,CAAC;AAED,WAAO,MAAM,KAAK,UAAU,EAAE,KAAK;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,oBAAuC;AAClD,UAAM,QAAQ,MAAM,KAAK,OAAO,GAAG,GAAI;AACvC,UAAM,cAAc,oBAAI,IAAY;AAEpC,UAAM,QAAQ,UAAQ;AACpB,UAAI,KAAK,iBAAiB,KAAK,cAAc,KAAK,GAAG;AACnD,oBAAY,IAAI,KAAK,aAAa;AAAA,MACpC;AAAA,IACF,CAAC;AAED,WAAO,MAAM,KAAK,WAAW,EAAE,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,iBAAoC;AAC/C,UAAM,QAAQ,MAAM,KAAK,OAAO,GAAG,GAAI;AACvC,UAAM,WAAW,oBAAI,IAAY;AAEjC,UAAM,QAAQ,UAAQ;AACpB,UAAI,KAAK,gBAAgB,KAAK,aAAa,KAAK,GAAG;AACjD,iBAAS,IAAI,KAAK,YAAY;AAAA,MAChC;AAAA,IACF,CAAC;AAED,WAAO,MAAM,KAAK,QAAQ,EAAE,KAAK;AAAA,EACnC;AACF;",
  "names": []
}
