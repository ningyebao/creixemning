{
  "version": 3,
  "sources": ["../../../app/services/assignacio.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\assignacio.service.ts\"\n);\nimport.meta.hot.lastModified = \"1745592615060.9988\";\n}\n// REMIX HMR END\n\n// app/services/assignacio.service.ts\r\nimport { apiClient } from \"~/lib/api/client\";\r\nimport type { Assignacio, AssignacioFilters } from \"~/lib/types\";\r\n\r\n// Definir estados v\u00E1lidos como tipo y constantes\r\ntype EstadoAsignacion = \"Pendiente\" | \"En progreso\" | \"Completada\" | \"Cancelada\";\r\nconst ESTADOS_ASIGNACION = {\r\n  PENDIENTE: \"Pendiente\" as EstadoAsignacion,\r\n  EN_PROGRESO: \"En progreso\" as EstadoAsignacion,\r\n  COMPLETADA: \"Completada\" as EstadoAsignacion,\r\n  CANCELADA: \"Cancelada\" as EstadoAsignacion\r\n};\r\n\r\nexport class AssignacioService {\r\n  // Constante para el endpoint base - esto asegura consistencia\r\n  private static ENDPOINT = \"/fitxes_assignacions\";\r\n\r\n  /**\r\n   * Obtiene una lista paginada y filtrada de asignaciones.\r\n   */\r\n  static async getAll(\r\n    offset: number = 0,\r\n    limit: number = 50,\r\n    filters: AssignacioFilters = {}\r\n  ): Promise<Assignacio[]> {\r\n    try {\r\n      // Crear un objeto de par\u00E1metros de consulta\r\n      const params: Record<string, any> = { \r\n        offset, \r\n        limit,\r\n        ...filters \r\n      };\r\n      \r\n      console.log(`AssignacioService.getAll: Fetching with params:`, params);\r\n      const response = await apiClient.get<Assignacio[]>(this.ENDPOINT, params);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`AssignacioService.getAll: Error fetching assignments`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza una asignaci\u00F3n existente por su ID.\r\n   */\r\n  static async update(\r\n    id: number,\r\n    data: Partial<Omit<Assignacio, 'id_fitxes_asignacions'>>\r\n  ): Promise<Assignacio> {\r\n    try {\r\n      // Asegurar que estamos utilizando un formato de campo consistente\r\n      const normalizedData = this.normalizeAssignmentData(data);\r\n      \r\n      const endpoint = `${this.ENDPOINT}/${id}/`;\r\n      console.log(`AssignacioService.update: Updating assignment ${id} with data:`, normalizedData); \r\n      const response = await apiClient.patch<Assignacio>(endpoint, normalizedData);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`AssignacioService.update: Error updating assignment ${id}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza una asignaci\u00F3n masiva de leads a agentes (Round-Robin, m\u00E9todo equitativo)\r\n   */\r\n  static async bulkAssign(\r\n    agentIds: number[],\r\n    leadIds: number[],\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones = '',\r\n    idCampanya = 1,\r\n    idAutor = 1\r\n  ): Promise<{ success: number; error: number; errorDetails?: string }> {\r\n    try {\r\n      if (agentIds.length === 0 || leadIds.length === 0) {\r\n        return { \r\n          success: 0, \r\n          error: 0, \r\n          errorDetails: \"No hay agentes o leads seleccionados\" \r\n        };\r\n      }\r\n\r\n      const leadId = leadIds[0];\r\n      const agentId = agentIds[0];\r\n\r\n      const iso = new Date().toISOString();\r\n      const naive = iso.replace('Z', '');\r\n\r\n      // Usar un nombre de campo consistente para observaciones y el tipo correcto para el estado\r\n      const data: Omit<Assignacio, 'id_fitxes_asignacions'> = {\r\n        id_agents: agentId,\r\n        id_leads: leadId,\r\n        id_autor: idAutor,\r\n        id_campanya_leads: idCampanya,\r\n        estat_fitxes_assignacions: ESTADOS_ASIGNACION.PENDIENTE,\r\n        potencial_fitxes_assignacions: potencial,\r\n        prioritat_fitxes_assignacions: prioritat,\r\n        obsevacions_fitxes_assignacions: observaciones, // Usar el nombre de campo que espera el backend\r\n        data_creacio_fitxes_assignacions: naive,\r\n        id_fitxes_trucades_fitxes_asignacions: 0\r\n      };\r\n\r\n      console.log('bulkAssign payload:', data);\r\n\r\n      const result = await this.create(data);\r\n      console.log('Asignaci\u00F3n creada:', result);\r\n      return { success: 1, error: 0 };\r\n    } catch (err) {\r\n      console.error('Error en bulkAssign:', err);\r\n      return { \r\n        success: 0, \r\n        error: 1, \r\n        errorDetails: err instanceof Error ? err.message : String(err) \r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza una asignaci\u00F3n masiva de todos los leads a todos los agentes seleccionados\r\n   */\r\n  static async bulkAssignAll(\r\n    agentIds: number[],\r\n    leadIds: number[],\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones = '',\r\n    idCampanya = 1,\r\n    idAutor = 1\r\n  ): Promise<{ success: number; error: number; errorDetails?: string }> {\r\n    if (agentIds.length === 0 || leadIds.length === 0) {\r\n      return { \r\n        success: 0, \r\n        error: 0, \r\n        errorDetails: \"No hay agentes o leads seleccionados\" \r\n      };\r\n    }\r\n\r\n    const assignments: Omit<Assignacio, 'id_fitxes_asignacions'>[] = [];\r\n    const iso = new Date().toISOString();\r\n    const naive = iso.replace('Z', '');\r\n\r\n    // Crear todas las asignaciones lead-agente\r\n    for (const leadId of leadIds) {\r\n      for (const agentId of agentIds) {\r\n        assignments.push({\r\n          id_agents: agentId,\r\n          id_leads: leadId,\r\n          id_autor: idAutor,\r\n          id_campanya_leads: idCampanya,\r\n          estat_fitxes_assignacions: ESTADOS_ASIGNACION.PENDIENTE,\r\n          potencial_fitxes_assignacions: potencial,\r\n          prioritat_fitxes_assignacions: prioritat,\r\n          obsevacions_fitxes_assignacions: observaciones, // Usar el nombre de campo consistente\r\n          data_creacio_fitxes_assignacions: naive,\r\n          id_fitxes_trucades_fitxes_asignacions: 0\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log('bulkAssignAll assignments count:', assignments.length);\r\n    console.log('bulkAssignAll sample payload:', assignments.slice(0, 1));\r\n\r\n    // Usar Promise.allSettled para manejar casos de \u00E9xito y fallo\r\n    const results = await Promise.allSettled(\r\n      assignments.map(data => this.create(data))\r\n    );\r\n\r\n    const successCount = results.filter(r => r.status === 'fulfilled').length;\r\n    const rejected = results.filter(r => r.status === 'rejected') as PromiseRejectedResult[];\r\n    const errorCount = rejected.length;\r\n    \r\n    let errorDetails = '';\r\n    if (errorCount > 0) {\r\n      // Extraer informaci\u00F3n detallada de los errores\r\n      errorDetails = rejected.map(r => {\r\n        const reason = r.reason;\r\n        if (reason instanceof Error) {\r\n          return reason.message;\r\n        }\r\n        return String(reason);\r\n      }).join('; ');\r\n    }\r\n\r\n    console.log('bulkAssignAll results:', { successCount, errorCount, errorDetails });\r\n\r\n    return { \r\n      success: successCount, \r\n      error: errorCount, \r\n      errorDetails: errorDetails || undefined \r\n    };\r\n  }\r\n\r\n  /**\r\n   * Crea una asignaci\u00F3n individual de un lead a un agente para una campa\u00F1a.\r\n   */\r\n  static async createIndividualAssignment(\r\n    leadId: number,\r\n    agentId: number,\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones: string,\r\n    campanyaId: number,\r\n    idAutor = 1\r\n  ): Promise<Assignacio> {\r\n    const iso = new Date().toISOString();\r\n    const naive = iso.replace('Z', '');\r\n\r\n    const data: Omit<Assignacio, 'id_fitxes_asignacions'> = {\r\n      id_agents: agentId,\r\n      id_leads: leadId,\r\n      id_autor: idAutor,\r\n      id_campanya_leads: campanyaId,\r\n      estat_fitxes_assignacions: ESTADOS_ASIGNACION.PENDIENTE,\r\n      potencial_fitxes_assignacions: potencial,\r\n      prioritat_fitxes_assignacions: prioritat,\r\n      obsevacions_fitxes_assignacions: observaciones, // Usar nombre consistente\r\n      data_creacio_fitxes_assignacions: naive,\r\n      id_fitxes_trucades_fitxes_asignacions: 0\r\n    };\r\n\r\n    console.log('createIndividualAssignment payload:', data);\r\n    return this.create(data);\r\n  }\r\n\r\n  /** M\u00E9todo gen\u00E9rico para crear una asignaci\u00F3n */\r\n  static async create(\r\n    data: Omit<Assignacio, 'id_fitxes_asignacions'>\r\n  ): Promise<Assignacio> {\r\n    try {\r\n      // Normalizar datos antes de enviar\r\n      const normalizedData = this.normalizeAssignmentData(data);\r\n      \r\n      // Asegurarnos de que estamos usando el endpoint correcto\r\n      return apiClient.post<Assignacio>(this.ENDPOINT, normalizedData);\r\n    } catch (error) {\r\n      console.error(`AssignacioService.create: Error creating assignment`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene una asignaci\u00F3n por su ID\r\n   */\r\n  static async getById(id: number): Promise<Assignacio | null> {\r\n    try {\r\n      const endpoint = `${this.ENDPOINT}/${id}/`;\r\n      console.log(`AssignacioService.getById: Fetching from ${endpoint}`);\r\n      const response = await apiClient.get<Assignacio>(endpoint);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`AssignacioService.getById: Error fetching assignment ${id}`, error);\r\n      // Si el error es 404, devolvemos null en lugar de lanzar el error\r\n      if (error && typeof error === 'object' && 'status' in error && error.status === 404) {\r\n        return null;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Elimina una asignaci\u00F3n por su ID\r\n   */\r\n  static async delete(id: number): Promise<void> {\r\n    try {\r\n      const endpoint = `${this.ENDPOINT}/${id}/`;\r\n      console.log(`AssignacioService.delete: Deleting assignment ${id} from ${endpoint}`);\r\n      await apiClient.delete(endpoint);\r\n    } catch (error) {\r\n      console.error(`AssignacioService.delete: Error deleting assignment ${id}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normaliza los datos de asignaci\u00F3n para usar nombres de campo consistentes\r\n   * Esta funci\u00F3n ayuda a manejar las discrepancias entre diferentes partes del c\u00F3digo\r\n   */\r\n  private static normalizeAssignmentData(data: Record<string, any>): Record<string, any> {\r\n    const result = { ...data };\r\n    \r\n    // Si existe 'observacions_fitxes_assignacions', convertirlo a 'obsevacions_fitxes_assignacions'\r\n    if ('observacions_fitxes_assignacions' in result) {\r\n      result['obsevacions_fitxes_assignacions'] = result['observacions_fitxes_assignacions'];\r\n      delete result['observacions_fitxes_assignacions'];\r\n    }\r\n    \r\n    return result;\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
