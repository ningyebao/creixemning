{
  "version": 3,
  "sources": ["../../../app/services/filter-group.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\filter-group.service.ts\"\n);\nimport.meta.hot.lastModified = \"1745418565784.733\";\n}\n// REMIX HMR END\n\n// ~/services/filter-group.service.ts\r\n\r\nexport interface FilterGroup {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    createdAt: string;\r\n    filters: Record<string, any>;\r\n  }\r\n  \r\n  export class FilterGroupService {\r\n    private static STORAGE_KEY = 'filter-groups';\r\n    \r\n    // Generate a simple ID based on timestamp + random\r\n    private static generateId(): string {\r\n      return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n    \r\n    static getAll(): FilterGroup[] {\r\n      // Check if we're in a browser environment\r\n      if (typeof window === 'undefined') return [];\r\n      \r\n      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    }\r\n    \r\n    static save(group: Omit<FilterGroup, 'id' | 'createdAt'> & { id?: string }): FilterGroup {\r\n      const groups = this.getAll();\r\n      \r\n      // Create a new filter group or update existing one\r\n      const newGroup: FilterGroup = {\r\n        ...group,\r\n        id: group.id || this.generateId(),\r\n        createdAt: group.id \r\n          ? (groups.find(g => g.id === group.id)?.createdAt || new Date().toISOString())\r\n          : new Date().toISOString()\r\n      };\r\n      \r\n      const existingIndex = groups.findIndex(g => g.id === newGroup.id);\r\n      \r\n      if (existingIndex >= 0) {\r\n        groups[existingIndex] = newGroup;\r\n      } else {\r\n        groups.push(newGroup);\r\n      }\r\n      \r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(groups));\r\n      return newGroup;\r\n    }\r\n    \r\n    static delete(id: string): void {\r\n      const groups = this.getAll();\r\n      const filtered = groups.filter(g => g.id !== id);\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filtered));\r\n    }\r\n    \r\n    static getById(id: string): FilterGroup | undefined {\r\n      const groups = this.getAll();\r\n      return groups.find(g => g.id === id);\r\n    }\r\n  }"],
  "mappings": ";;;;;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAaS,IAAM,qBAAN,MAAyB;AAAA;AAAA,EAI9B,OAAe,aAAqB;AAClC,WAAO,GAAG,KAAK,IAAI,KAAK,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AAAA,EAChE;AAAA,EAEA,OAAO,SAAwB;AAE7B,QAAI,OAAO,WAAW;AAAa,aAAO,CAAC;AAE3C,UAAM,SAAS,aAAa,QAAQ,KAAK,WAAW;AACpD,WAAO,SAAS,KAAK,MAAM,MAAM,IAAI,CAAC;AAAA,EACxC;AAAA,EAEA,OAAO,KAAK,OAA6E;AACvF,UAAM,SAAS,KAAK,OAAO;AAG3B,UAAM,WAAwB;AAAA,MAC5B,GAAG;AAAA,MACH,IAAI,MAAM,MAAM,KAAK,WAAW;AAAA,MAChC,WAAW,MAAM,KACZ,OAAO,KAAK,OAAK,EAAE,OAAO,MAAM,EAAE,GAAG,cAAa,oBAAI,KAAK,GAAE,YAAY,KAC1E,oBAAI,KAAK,GAAE,YAAY;AAAA,IAC7B;AAEA,UAAM,gBAAgB,OAAO,UAAU,OAAK,EAAE,OAAO,SAAS,EAAE;AAEhE,QAAI,iBAAiB,GAAG;AACtB,aAAO,aAAa,IAAI;AAAA,IAC1B,OAAO;AACL,aAAO,KAAK,QAAQ;AAAA,IACtB;AAEA,iBAAa,QAAQ,KAAK,aAAa,KAAK,UAAU,MAAM,CAAC;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,OAAO,IAAkB;AAC9B,UAAM,SAAS,KAAK,OAAO;AAC3B,UAAM,WAAW,OAAO,OAAO,OAAK,EAAE,OAAO,EAAE;AAC/C,iBAAa,QAAQ,KAAK,aAAa,KAAK,UAAU,QAAQ,CAAC;AAAA,EACjE;AAAA,EAEA,OAAO,QAAQ,IAAqC;AAClD,UAAM,SAAS,KAAK,OAAO;AAC3B,WAAO,OAAO,KAAK,OAAK,EAAE,OAAO,EAAE;AAAA,EACrC;AACF;AAjDE,cADW,oBACI,eAAc;",
  "names": []
}
