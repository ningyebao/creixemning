{
  "version": 3,
  "sources": ["../../../app/services/assignacio.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\assignacio.service.ts\"\n);\nimport.meta.hot.lastModified = \"1748252173901.5112\";\n}\n// REMIX HMR END\n\n// app/services/assignacio.service.ts\r\nimport { apiClient } from \"~/lib/api/client\";\r\nimport type { Assignacio, AssignacioFilters } from \"~/lib/types\";\r\n\r\n/**\r\n * Resultado de operaciones masivas\r\n */\r\ninterface BulkResult {\r\n  success: number;\r\n  error: number;\r\n  errorDetails?: string;\r\n}\r\n\r\nexport class AssignacioService {\r\n  // Ruta correcta seg\u00FAn la configuraci\u00F3n del backend\r\n  private static BASE_URL = '/fitxes-assignacions/';\r\n\r\n  /**\r\n   * Obtiene todas las asignaciones con filtros opcionales\r\n   * @param skip N\u00FAmero de registros a omitir para paginaci\u00F3n\r\n   * @param limit L\u00EDmite de registros por p\u00E1gina\r\n   * @param filters Filtros opcionales para la b\u00FAsqueda\r\n   * @returns Lista de asignaciones\r\n   */\r\n  static async getAll(skip = 0, limit = 100, filters?: AssignacioFilters): Promise<Assignacio[]> {\r\n    try {\r\n      const params = { skip, limit, ...filters };\r\n      console.log('Obteniendo asignaciones con filtros:', JSON.stringify(filters, null, 2));\r\n      return await apiClient.get<Assignacio[]>(this.BASE_URL, { params });\r\n    } catch (error) {\r\n      console.error('Error fetching assignacions:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene una asignaci\u00F3n por su ID\r\n   * @param id ID de la asignaci\u00F3n\r\n   * @returns Asignaci\u00F3n encontrada\r\n   */\r\n  static async getById(id: number): Promise<Assignacio> {\r\n    try {\r\n      return await apiClient.get<Assignacio>(`${this.BASE_URL}${id}`);\r\n    } catch (error) {\r\n      console.error(`Error fetching assignacio with ID ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene asignaciones por ID de agente\r\n   * @param agentId ID del agente\r\n   * @param skip N\u00FAmero de registros a omitir para paginaci\u00F3n\r\n   * @param limit L\u00EDmite de registros por p\u00E1gina\r\n   * @returns Lista de asignaciones del agente\r\n   */\r\n  static async getByAgent(agentId: number, skip = 0, limit = 100): Promise<Assignacio[]> {\r\n    try {\r\n      const params = { id_agents: agentId, skip, limit };\r\n      return await apiClient.get<Assignacio[]>(this.BASE_URL, { params });\r\n    } catch (error) {\r\n      console.error(`Error fetching assignacions for agent ${agentId}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene asignaciones por ID de lead\r\n   * @param leadId ID del lead\r\n   * @param skip N\u00FAmero de registros a omitir para paginaci\u00F3n\r\n   * @param limit L\u00EDmite de registros por p\u00E1gina\r\n   * @returns Lista de asignaciones del lead\r\n   */\r\n  static async getByLead(leadId: number, skip = 0, limit = 100): Promise<Assignacio[]> {\r\n    try {\r\n      const params = { id_leads: leadId, skip, limit };\r\n      return await apiClient.get<Assignacio[]>(this.BASE_URL, { params });\r\n    } catch (error) {\r\n      console.error(`Error fetching assignacions for lead ${leadId}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asigna un lead a un agente\r\n   * @param agentId ID del agente\r\n   * @param leadId ID del lead\r\n   * @param prioritat Prioridad de la asignaci\u00F3n\r\n   * @param potencial Potencial de la asignaci\u00F3n\r\n   * @param observaciones Observaciones opcionales\r\n   * @param campanyaId ID de la campa\u00F1a\r\n   * @param authorId ID del autor de la asignaci\u00F3n\r\n   * @returns Asignaci\u00F3n creada\r\n   */\r\n  static async assign(\r\n    agentId: number,\r\n    leadId: number,\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones: string,\r\n    campanyaId: number,\r\n    authorId: number = 1\r\n  ): Promise<Assignacio> {\r\n    try {\r\n      console.log(`Asignando lead ${leadId} a agente ${agentId}`);\r\n      \r\n      // IMPORTANTE: Ahora usamos id_campanya como lo requiere el backend\r\n      const data = {\r\n        id_agents: agentId,\r\n        id_leads: leadId,\r\n        prioritat_fitxes_assignacions: prioritat,\r\n        potencial_fitxes_assignacions: potencial,\r\n        obsevacions_fitxes_assignacions: observaciones,\r\n        id_campanya: campanyaId, // Nombre requerido por el backend\r\n        id_autor: authorId,\r\n        estat_fitxes_assignacions: \"Pendiente\" // Estado por defecto\r\n      };\r\n\r\n      console.log('Datos de asignaci\u00F3n:', data);\r\n      return await apiClient.post<Assignacio>(this.BASE_URL, data);\r\n    } catch (error) {\r\n      console.error(`Error assigning lead ${leadId} to agent ${agentId}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asigna m\u00FAltiples leads a m\u00FAltiples agentes en modo round-robin\r\n   * @param agentIds Array de IDs de agentes\r\n   * @param leadIds Array de IDs de leads\r\n   * @param prioritat Prioridad de las asignaciones\r\n   * @param potencial Potencial de las asignaciones\r\n   * @param observaciones Observaciones opcionales\r\n   * @param campanyaId ID de la campa\u00F1a\r\n   * @param authorId ID del autor de las asignaciones\r\n   * @returns Resultado de la operaci\u00F3n\r\n   */\r\n  static async bulkAssign(\r\n    agentIds: number[],\r\n    leadIds: number[],\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones: string,\r\n    campanyaId: number,\r\n    authorId: number = 1\r\n  ): Promise<BulkResult> {\r\n    try {\r\n      console.log('Iniciando asignaci\u00F3n masiva round-robin con:', {\r\n        agentIds, leadIds, prioritat, potencial, observaciones, campanyaId, authorId\r\n      });\r\n      \r\n      // Implementar l\u00F3gica de round-robin manualmente\r\n      let assignedCount = 0;\r\n      let errorCount = 0;\r\n      let errorDetails = '';\r\n      \r\n      // Asignaci\u00F3n round-robin (distribuir leads entre agentes)\r\n      for (let i = 0; i < leadIds.length; i++) {\r\n        const agentIndex = i % agentIds.length;\r\n        const agentId = agentIds[agentIndex];\r\n        const leadId = leadIds[i];\r\n        \r\n        try {\r\n          console.log(`Asignando lead ${leadId} a agente ${agentId} (${i+1}/${leadIds.length})`);\r\n          await this.assign(agentId, leadId, prioritat, potencial, observaciones, campanyaId, authorId);\r\n          assignedCount++;\r\n        } catch (assignError: any) {\r\n          errorCount++;\r\n          errorDetails += `Lead ${leadId} a Agente ${agentId}: ${assignError.message}. `;\r\n          console.error(`Error al asignar lead ${leadId} a agente ${agentId}:`, assignError);\r\n        }\r\n      }\r\n      \r\n      console.log(`Asignaci\u00F3n round-robin completada: ${assignedCount} \u00E9xitos, ${errorCount} errores`);\r\n      return {\r\n        success: assignedCount,\r\n        error: errorCount,\r\n        errorDetails: errorDetails || undefined\r\n      };\r\n    } catch (error) {\r\n      console.error('Error en bulkAssign:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asigna m\u00FAltiples leads a m\u00FAltiples agentes (todos a todos)\r\n   * @param agentIds Array de IDs de agentes\r\n   * @param leadIds Array de IDs de leads\r\n   * @param prioritat Prioridad de las asignaciones\r\n   * @param potencial Potencial de las asignaciones\r\n   * @param observaciones Observaciones opcionales\r\n   * @param campanyaId ID de la campa\u00F1a\r\n   * @param authorId ID del autor de las asignaciones\r\n   * @returns Resultado de la operaci\u00F3n\r\n   */\r\n  static async bulkAssignAll(\r\n    agentIds: number[],\r\n    leadIds: number[],\r\n    prioritat: number,\r\n    potencial: number,\r\n    observaciones: string,\r\n    campanyaId: number,\r\n    authorId: number = 1\r\n  ): Promise<BulkResult> {\r\n    try {\r\n      console.log('Iniciando asignaci\u00F3n masiva todos-a-todos con:', {\r\n        agentIds, leadIds, prioritat, potencial, observaciones, campanyaId, authorId\r\n      });\r\n      \r\n      // Implementar asignaci\u00F3n todos a todos manualmente\r\n      let assignedCount = 0;\r\n      let errorCount = 0;\r\n      let errorDetails = '';\r\n      const totalAssignments = agentIds.length * leadIds.length;\r\n      let currentAssignment = 0;\r\n      \r\n      // Asignaci\u00F3n de todos los leads a todos los agentes\r\n      for (const agentId of agentIds) {\r\n        for (const leadId of leadIds) {\r\n          currentAssignment++;\r\n          try {\r\n            console.log(`Asignando lead ${leadId} a agente ${agentId} (${currentAssignment}/${totalAssignments})`);\r\n            await this.assign(agentId, leadId, prioritat, potencial, observaciones, campanyaId, authorId);\r\n            assignedCount++;\r\n          } catch (assignError: any) {\r\n            errorCount++;\r\n            errorDetails += `Lead ${leadId} a Agente ${agentId}: ${assignError.message}. `;\r\n            console.error(`Error al asignar lead ${leadId} a agente ${agentId}:`, assignError);\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log(`Asignaci\u00F3n todos-a-todos completada: ${assignedCount} \u00E9xitos, ${errorCount} errores`);\r\n      return {\r\n        success: assignedCount,\r\n        error: errorCount,\r\n        errorDetails: errorDetails || undefined\r\n      };\r\n    } catch (error) {\r\n      console.error('Error en bulkAssignAll:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza el estado de una asignaci\u00F3n\r\n   * @param id ID de la asignaci\u00F3n\r\n   * @param estado Nuevo estado\r\n   * @returns Asignaci\u00F3n actualizada\r\n   */\r\n  static async updateStatus(id: number, estado: string): Promise<Assignacio> {\r\n    try {\r\n      return await apiClient.patch<Assignacio>(`${this.BASE_URL}${id}`, { \r\n        estat_fitxes_assignacions: estado \r\n      });\r\n    } catch (error) {\r\n      console.error(`Error updating status for assignacio ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina una asignaci\u00F3n\r\n   * @param id ID de la asignaci\u00F3n\r\n   * @returns Resultado de la operaci\u00F3n\r\n   */\r\n  static async delete(id: number): Promise<{detail: string}> {\r\n    try {\r\n      return await apiClient.delete<{detail: string}>(`${this.BASE_URL}${id}`);\r\n    } catch (error) {\r\n      console.error(`Error deleting assignacio ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja errores de la API y los transforma en mensajes de error amigables\r\n   * @param error Error original\r\n   * @returns Error procesado\r\n   */\r\n  private static handleError(error: any): Error {\r\n    console.error('Error en AssignacioService:', error);\r\n    \r\n    // Si es un error de axios con respuesta\r\n    if (error.response) {\r\n      const statusCode = error.response.status;\r\n      const errorMessage = error.response.data?.detail || 'Error desconocido';\r\n      \r\n      switch (statusCode) {\r\n        case 400:\r\n          return new Error(`Error en la solicitud: ${errorMessage}`);\r\n        case 401:\r\n          return new Error('No autorizado. Por favor, inicie sesi\u00F3n nuevamente.');\r\n        case 403:\r\n          return new Error('No tiene permisos para realizar esta acci\u00F3n.');\r\n        case 404:\r\n          return new Error('El recurso solicitado no existe.');\r\n        case 500:\r\n          return new Error('Error del servidor. Por favor, intente m\u00E1s tarde.');\r\n        default:\r\n          return new Error(errorMessage);\r\n      }\r\n    }\r\n    \r\n    // Si es un error de red\r\n    if (error.request) {\r\n      return new Error('No se pudo conectar con el servidor. Compruebe su conexi\u00F3n a internet.');\r\n    }\r\n    \r\n    // Para errores que no son de axios o errores personalizados\r\n    return error instanceof Error ? error : new Error('Error desconocido');\r\n  }\r\n}"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;",
  "names": []
}
