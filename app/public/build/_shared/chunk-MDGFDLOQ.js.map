{
  "version": 3,
  "sources": ["../../../app/services/agents.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\agents.service.ts\"\n);\nimport.meta.hot.lastModified = \"1746438974739.745\";\n}\n// REMIX HMR END\n\n// app/services/agents.service.ts\r\nimport { apiClient } from '~/lib/api/client';\r\nimport type { Agent } from '~/lib/types';\r\n\r\nexport class AgentService {\r\n  // Usamos la ruta exacta que est\u00E1 en el backend\r\n  private static readonly BASE_ENDPOINT = '/agents/';\r\n\r\n  static async getAll(): Promise<Agent[]> {\r\n    // A\u00F1adamos un log para depuraci\u00F3n\r\n    console.log('AgentService: Llamando a getAll()');\r\n    try {\r\n      const agents = await apiClient.get<Agent[]>(this.BASE_ENDPOINT);\r\n      console.log('AgentService: Respuesta de getAll()', agents);\r\n      return agents;\r\n    } catch (error) {\r\n      console.error('AgentService: Error en getAll()', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getById(id: number): Promise<Agent> {\r\n    return apiClient.get<Agent>(`${this.BASE_ENDPOINT}/${id}`);\r\n  }\r\n\r\n  static async create(agentData: Partial<Agent>): Promise<Agent> {\r\n    // Convertir datos null a undefined para que coincidan con el tipo Agent\r\n    const cleanedData = Object.fromEntries(\r\n      Object.entries(agentData).map(([k, v]) => [k, v === null ? undefined : v])\r\n    );\r\n    \r\n    return apiClient.post<Agent>(this.BASE_ENDPOINT, cleanedData);\r\n  }\r\n\r\n  static async update(id: number, agentData: Partial<Agent>): Promise<Agent> {\r\n    // Convertir datos null a undefined para que coincidan con el tipo Agent\r\n    const cleanedData = Object.fromEntries(\r\n      Object.entries(agentData).map(([k, v]) => [k, v === null ? undefined : v])\r\n    );\r\n    \r\n    return apiClient.post<Agent>(`${this.BASE_ENDPOINT}/${id}`, cleanedData);\r\n  }\r\n\r\n  static async delete(id: number): Promise<void> {\r\n    return apiClient.get<void>(`${this.BASE_ENDPOINT}/${id}/delete`);\r\n  }\r\n}"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;",
  "names": []
}
