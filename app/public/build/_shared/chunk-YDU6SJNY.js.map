{
  "version": 3,
  "sources": ["../../../app/services/leads.service.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\services\\\\leads.service.ts\"\n);\nimport.meta.hot.lastModified = \"1748619725694.9238\";\n}\n// REMIX HMR END\n\n// app/services/leads.service.ts\r\nimport { apiClient } from \"~/lib/api/client\";\r\nimport type { Lead, LeadFilters } from \"~/lib/types\";\r\n\r\n// Definici\u00F3n de placeholder para CNAEOption si no existe en tus tipos globales\r\n// Si ya tienes esta definici\u00F3n en \"~/lib/types\" o similar, puedes quitar esta.\r\ninterface CNAEOption {\r\n  code: string;\r\n  description: string;\r\n  // Agrega m\u00E1s propiedades si es necesario\r\n}\r\n\r\nexport class LeadService {\r\n  // Ruta base para las operaciones con leads\r\n  private static BASE_URL = '/leads/';\r\n\r\n  /**\r\n   * Obtiene todos los leads\r\n   * @param skip N\u00FAmero de registros a omitir para paginaci\u00F3n\r\n   * @param limit L\u00EDmite de registros por p\u00E1gina\r\n   * @param filters Filtros opcionales para la b\u00FAsqueda\r\n   * @returns Lista de leads\r\n   */\r\n  static async getAll(skip = 0, limit = 100, filters?: LeadFilters): Promise<Lead[]> {\r\n    try {\r\n      const params = { skip, limit, ...filters };\r\n      console.log('Obteniendo todos los leads con par\u00E1metros:', params);\r\n      return await apiClient.get<Lead[]>(this.BASE_URL, { params });\r\n    } catch (error) {\r\n      console.error('Error fetching leads:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene un lead por su ID\r\n   * @param id ID del lead\r\n   * @returns Lead encontrado\r\n   */\r\n  static async getById(id: number): Promise<Lead> {\r\n    try {\r\n      return await apiClient.get<Lead>(`${this.BASE_URL}${id}/`); // Aseg\u00FArate que la URL base no termine en / o esta s\u00ED\r\n    } catch (error) {\r\n      console.error(`Error fetching lead with ID ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene leads no asignados con filtros opcionales\r\n   * @param skip N\u00FAmero de registros a omitir para paginaci\u00F3n\r\n   * @param limit L\u00EDmite de registros por p\u00E1gina\r\n   * @param filters Filtros opcionales para la b\u00FAsqueda\r\n   * @returns Lista de leads no asignados\r\n   */\r\n  static async getUnassigned(skip = 0, limit = 100, filters?: Record<string, any>): Promise<Lead[]> {\r\n    try {\r\n      const params: Record<string, any> = { skip, limit };\r\n\r\n      if (filters) {\r\n        Object.assign(params, filters);\r\n      }\r\n\r\n      console.log('=== DEBUG: LeadService.getUnassigned ===');\r\n      console.log('URL base:', this.BASE_URL);\r\n      console.log('Filtros recibidos:', JSON.stringify(filters, null, 2));\r\n      console.log('Par\u00E1metros completos:', JSON.stringify(params, null, 2));\r\n\r\n      // IMPORTANTE: Verificar cu\u00E1l es el endpoint correcto en tu backend\r\n      // Opci\u00F3n 1: Si el backend filtra con un par\u00E1metro\r\n      // const url = this.BASE_URL;\r\n      // params.is_assigned = false;  // o params.asignado = false\r\n\r\n      // Opci\u00F3n 2: Si el backend tiene un endpoint espec\u00EDfico\r\n      // Prueba con estas opciones hasta encontrar la correcta:\r\n\r\n      // const url = `${this.BASE_URL}unassigned/`;  // /leads/unassigned/\r\n      // const url = `${this.BASE_URL}no-asignados/`;  // /leads/no-asignados/\r\n      // const url = `${this.BASE_URL}sin-asignar/`;  // /leads/sin-asignar/\r\n      const url = this.BASE_URL;  // /leads/ con par\u00E1metro is_assigned=false\r\n      params.is_assigned = false;  // Agregar este par\u00E1metro si usas la URL base\r\n\r\n      console.log('URL completa que se va a llamar:', url);\r\n      console.log('Con par\u00E1metros:', new URLSearchParams(params).toString());\r\n\r\n      try {\r\n        // El m\u00E9todo apiClient.get espera que el segundo argumento sea un objeto con una propiedad 'params'\r\n        // cuando quieres pasar par\u00E1metros de consulta.\r\n        const response = await apiClient.get<Lead[]>(url, params); // Modificado para que coincida con la firma de apiClient\r\n        console.log('\u2705 Respuesta exitosa');\r\n        console.log('N\u00FAmero de leads recibidos:', response.length);\r\n        if (response.length > 0 && response[0]) { // A\u00F1adida verificaci\u00F3n para response[0]\r\n          console.log('Ejemplo del primer lead:', {\r\n            id: response[0].id_lead,\r\n            nombre: response[0].nom_lead,\r\n            empresa: response[0].nom_empresarial_lead,\r\n            provincia: response[0].provincia_lead\r\n          });\r\n        }\r\n        return response;\r\n      } catch (apiError: any) {\r\n        console.error('\u274C Error en la llamada API:');\r\n        // En tu ApiClient, el error ya es un ApiError, as\u00ED que puedes acceder a sus propiedades directamente\r\n        console.error('Status:', apiError.status);\r\n        console.error('Status Text:', apiError.message); // O apiError.details dependiendo de lo que quieras mostrar\r\n        console.error('Error Details:', apiError.details); // El JSON.stringify(errorData) o el texto del error\r\n        console.error('URL intentada:', url);\r\n\r\n        // Si es 404, intenta con otra URL\r\n        if (apiError.status === 404) {\r\n          console.log('\u26A0\uFE0F El endpoint no existe. Posibles alternativas:');\r\n          console.log('- /leads/?is_assigned=false');\r\n          console.log('- /leads/?asignado=false');\r\n          console.log('- /leads/unassigned/');\r\n          console.log('- /leads/no-asignados/');\r\n          console.log('- /leads/sin-asignar/');\r\n        }\r\n\r\n        throw apiError; // Re-lanza el ApiError\r\n      }\r\n    } catch (error) {\r\n      console.error('Error general en getUnassigned:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Obtiene todas las provincias disponibles\r\n   * @returns Lista de provincias\r\n   */\r\n  static async getAllProvincias(): Promise<string[]> {\r\n    try {\r\n      return await apiClient.get<string[]>(`${this.BASE_URL}provincias/`);\r\n    } catch (error) {\r\n      console.error('Error fetching provincias:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las poblaciones disponibles\r\n   * @returns Lista de poblaciones\r\n   */\r\n  static async getAllPoblaciones(): Promise<string[]> {\r\n    try {\r\n      return await apiClient.get<string[]>(`${this.BASE_URL}poblaciones/`);\r\n    } catch (error) {\r\n      console.error('Error fetching poblaciones:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las comarcas disponibles\r\n   * @returns Lista de comarcas\r\n   */\r\n  static async getAllComarcas(): Promise<string[]> {\r\n    try {\r\n      return await apiClient.get<string[]>(`${this.BASE_URL}comarcas/`);\r\n    } catch (error) {\r\n      console.error('Error fetching comarcas:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las actividades disponibles\r\n   * @returns Lista de actividades\r\n   */\r\n  static async getAllActividades(): Promise<string[]> {\r\n    try {\r\n      return await apiClient.get<string[]>(`${this.BASE_URL}actividades/`);\r\n    } catch (error) {\r\n      console.error('Error fetching actividades:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los c\u00F3digos CNAE disponibles\r\n   * @returns Lista de opciones CNAE con c\u00F3digo y descripci\u00F3n\r\n   */\r\n  static async getAllCNAE(): Promise<CNAEOption[]> {\r\n    try {\r\n      console.log('=== DEBUG: LeadService.getAllCNAE ===');\r\n\r\n      // Intenta llamar al endpoint si existe\r\n      try {\r\n        const url = `${this.BASE_URL}cnae/`;\r\n        console.log('Intentando obtener CNAE desde:', url);\r\n        const response = await apiClient.get<CNAEOption[]>(url);\r\n        console.log('\u2705 CNAE obtenidos del servidor:', response.length);\r\n        return response;\r\n      } catch (error: any) {\r\n        console.warn('\u26A0\uFE0F No se pudo obtener CNAE del servidor, usando lista vac\u00EDa o de ejemplo.');\r\n        // Si falla, retorna lista de ejemplo o vac\u00EDa.\r\n        // Aqu\u00ED podr\u00EDas tener una lista de CNAE por defecto si lo deseas.\r\n        // Ejemplo:\r\n        // return [\r\n        //   { code: '0111', description: 'Cultivo de cereales (excepto arroz), leguminosas y semillas oleaginosas' },\r\n        //   { code: '0113', description: 'Cultivo de hortalizas, ra\u00EDces y tub\u00E9rculos' },\r\n        // ];\r\n        return []; // Retorna vac\u00EDo como en tu snippet\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching CNAE codes:', error);\r\n      // Decide si lanzar el error o devolver un array vac\u00EDo como fallback.\r\n      // throw this.handleError(error); // Opci\u00F3n si quieres que el error se propague\r\n      return []; // Devuelve vac\u00EDo como en tu snippet\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo lead\r\n   * @param leadData Datos del lead a crear\r\n   * @returns Lead creado\r\n   */\r\n  static async create(leadData: Partial<Lead>): Promise<Lead> {\r\n    try {\r\n      return await apiClient.post<Lead>(this.BASE_URL, leadData);\r\n    } catch (error) {\r\n      console.error('Error creating lead:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza un lead existente\r\n   * @param id ID del lead\r\n   * @param leadData Datos del lead a actualizar\r\n   * @returns Lead actualizado\r\n   */\r\n  static async update(id: number, leadData: Partial<Lead>): Promise<Lead> {\r\n    try {\r\n      return await apiClient.patch<Lead>(`${this.BASE_URL}${id}/`, leadData); // Aseg\u00FArate que la URL base no termine en / o esta s\u00ED\r\n    } catch (error) {\r\n      console.error(`Error updating lead ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un lead\r\n   * @param id ID del lead\r\n   * @returns Resultado de la operaci\u00F3n\r\n   */\r\n  static async delete(id: number): Promise<{ detail: string }> {\r\n    try {\r\n      return await apiClient.delete<{ detail: string }>(`${this.BASE_URL}${id}/`); // Aseg\u00FArate que la URL base no termine en / o esta s\u00ED\r\n    } catch (error) {\r\n      console.error(`Error deleting lead ${id}:`, error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja errores de la API y los transforma en mensajes de error amigables\r\n   * @param error Error original\r\n   * @returns Error procesado\r\n   */\r\n  private static handleError(error: any): Error {\r\n    // Si es un ApiError de nuestro apiClient\r\n    if (error.name === \"ApiError\" && typeof error.status === 'number') {\r\n        console.error(`ApiError: Status ${error.status}, Message: ${error.message}, Details: ${error.details}`);\r\n        // Puedes usar error.toUserFriendlyMessage() si esa l\u00F3gica te sirve aqu\u00ED.\r\n        // O personalizar el mensaje basado en el status o details.\r\n        return new Error(error.toUserFriendlyMessage() || `Error API: ${error.message}`);\r\n    }\r\n\r\n    // Si es un error de axios con respuesta (esto es por tu handleError original, pero nuestro ApiClient ya lo maneja)\r\n    // Puede que quieras simplificar esta parte si conf\u00EDas 100% en ApiError.\r\n    if (error.response) {\r\n      const statusCode = error.response.status;\r\n      const errorMessage = error.response.data?.detail || 'Error desconocido desde respuesta de error';\r\n\r\n      switch (statusCode) {\r\n        case 400:\r\n          return new Error(`Error en la solicitud: ${errorMessage}`);\r\n        case 401:\r\n          return new Error('No autorizado. Por favor, inicie sesi\u00F3n nuevamente.');\r\n        case 403:\r\n          return new Error('No tiene permisos para realizar esta acci\u00F3n.');\r\n        case 404:\r\n          return new Error('El recurso solicitado no existe.');\r\n        case 500:\r\n          return new Error('Error del servidor. Por favor, intente m\u00E1s tarde.');\r\n        default:\r\n          return new Error(errorMessage);\r\n      }\r\n    }\r\n\r\n    // Si es un error de red\r\n    if (error.request) {\r\n      return new Error('No se pudo conectar con el servidor. Compruebe su conexi\u00F3n a internet.');\r\n    }\r\n\r\n    // Para errores que no son de axios o errores personalizados\r\n    return error instanceof Error ? error : new Error('Error desconocido');\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
